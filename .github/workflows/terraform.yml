name: Terraform

on:
  pull_request:
    types: [labeled, opened, synchronize, reopened]
    branches:
      - "*"

  push:
    branches:
      - main

  workflow_dispatch:
    inputs:
      monitor_permissions:
        type: boolean
        description: Monitor Permissions
        required: false
        default: false

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Google Cloud
    runs-on: ubuntu-latest
    env:
      GRADLE_OPTS: "-Dorg.gradle.logging.level=${{ github.event.inputs.log_level || 'info' }}"

    permissions:
      pull-requests: 'write'
      id-token: write

    steps:
      - uses: GitHubSecurityLab/actions-permissions/monitor@v1
        if: ${{ github.event.inputs.monitor_permissions == 'true' }}

      - id: config
        run: |
          has_terraform_label=${{ contains(github.event.pull_request.labels.*.name, 'Terraform') }}
          is_main=${{ github.ref_name == 'main' }}
          echo "dry_run=$([[ $has_terraform_label || $is_main ]] && echo 'false' || echo 'true')"

      - uses: actions/checkout@v4

      - id: setup-cloud
        uses: ./.github/actions/setup-cloud
        with:
          workload_identity_provider: ${{ secrets.GOOGLE_WORKLOAD_IDENTITY }}
          service_account: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_ID }}
          token_format: access_token

      - uses: ./.github/actions/setup-gradle
        if: steps.config.outputs.dry_run == 'false'

      - if: steps.config.outputs.dry_run == 'false'
        run: |
          ./gradlew cloud-run:deploy \
            -Pimage=europe-west1-docker.pkg.dev/${{ steps.setup-cloud.outputs.project_id }}/cloud-run-source-deploy/api.ashdavies.dev \
            --no-configuration-cache \
            --console=plain

      - id: token
        uses: tibdex/github-app-token@v2
        with:
          private_key: ${{ secrets.PRIVATE_KEY }}
          app_id: ${{ secrets.APP_ID }}

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.4

      - run: terraform -chdir=terraform init

      - id: terraform-plan
        env:
          TF_VAR_op_service_account_token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          TF_VAR_op_vault_uuid: ${{ secrets.OP_VAULT_UUID }}
          TF_VAR_gh_token: ${{ steps.token.outputs.token }}
          TF_LOG: ${{ inputs.debug && 'DEBUG' || 'ERROR' }}
          TF_INPUT: false
        if: steps.config.outputs.dry_run == 'true'
        run: |
          terraform -chdir=terraform plan >/dev/null -lock-timeout=5m -out=.terraform/terraform.tfplan
          terraform -chdir=terraform show .terraform/terraform.tfplan -no-color

      - uses: thollander/actions-comment-pull-request@v3
        if: ${{ github.event_name == 'pull_request' }}
        with:
          message: "```${{ steps.terraform-plan.outputs.stdout }}```"
          comment-tag: terraform-plan
          mode: recreate

      - id: apply
        env:
          TF_LOG: ${{ inputs.debug && 'DEBUG' || 'ERROR' }}
          TF_VAR_gh_token: ${{ steps.token.outputs.token }}
          TF_INPUT: false
        if: steps.config.outputs.dry_run == 'false'
        run: terraform -chdir=terraform apply -auto-approve -lock-timeout=5m
